import 'package:flutter/material.dart';

void main() {
  runApp(QuizApp());
}

class QuizApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Quiz App',
      theme: ThemeData(primarySwatch: Colors.deepPurple),
      home: QuizHomePage(),
    );
  }
}

class Question {
  final String questionText;
  final List<String> options;
  final int correctAnswerIndex;

  Question(this.questionText, this.options, this.correctAnswerIndex);
}

class QuizHomePage extends StatefulWidget {
  @override
  _QuizHomePageState createState() => _QuizHomePageState();
}

class _QuizHomePageState extends State<QuizHomePage> {
  final List<Question> _questions = [
    Question("What is the capital of France?", ["Paris", "London", "Berlin", "Madrid"], 0),
    Question("Who wrote 'Hamlet'?", ["Shakespeare", "Dickens", "Homer", "Plato"], 0),
    Question("Which planet is closest to the Sun?", ["Mars", "Mercury", "Earth", "Venus"], 1),
  ];

  int _currentIndex = 0;
  int _score = 0;
  bool _quizCompleted = false;

  void _answerQuestion(int selectedIndex) {
    if (_questions[_currentIndex].correctAnswerIndex == selectedIndex) {
      _score++;
    }

    setState(() {
      if (_currentIndex < _questions.length - 1) {
        _currentIndex++;
      } else {
        _quizCompleted = true;
      }
    });
  }

  void _resetQuiz() {
    setState(() {
      _currentIndex = 0;
      _score = 0;
      _quizCompleted = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Quiz App")),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: _quizCompleted
            ? Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text("Quiz Completed!", style: TextStyle(fontSize: 24)),
                  SizedBox(height: 20),
                  Text("Your Score: $_score / ${_questions.length}", style: TextStyle(fontSize: 20)),
                  SizedBox(height: 20),
                  ElevatedButton(onPressed: _resetQuiz, child: Text("Play Again")),
                ],
              )
            : Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  Text("Question ${_currentIndex + 1} of ${_questions.length}", style: TextStyle(fontSize: 18)),
                  SizedBox(height: 20),
                  Text(_questions[_currentIndex].questionText, style: TextStyle(fontSize: 20)),
                  SizedBox(height: 20),
                  ..._questions[_currentIndex].options.asMap().entries.map((entry) {
                    int index = entry.key;
                    String option = entry.value;
                    return Padding(
                      padding: const EdgeInsets.symmetric(vertical: 5),
                      child: ElevatedButton(
                        onPressed: () => _answerQuestion(index),
                        child: Text(option),
                      ),
                    );
                  }),
                ],
              ),
      ),
    );
  }
}